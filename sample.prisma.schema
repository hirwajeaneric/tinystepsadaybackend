// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  role      UserRole @default(VIEWER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  // Authentication
  password     String?
  emailVerified DateTime?
  resetToken    String?
  resetTokenExpiry DateTime?

  // Profile Information
  bio          String?
  website      String?
  location     String?
  timezone     String?
  language     String? @default("en")
  
  // Preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  marketingEmails    Boolean @default(false)
  theme             String? @default("system")

  // Relationships
  permissions       UserPermission[]
  blogPosts         BlogPost[]
  coursesCreated    Course[] @relation("CourseInstructor")
  coursesEnrolled   CourseEnrollment[]
  quizAttempts      QuizAttempt[]
  notes             Note[]
  comments          Comment[]
  reviews           Review[]
  notifications     Notification[]
  activities        UserActivity[]
  mediaFiles        MediaFile[]
  payments          Payment[]
  certificates      Certificate[]
  blogPostViews     BlogPostView[]

  @@map("users")
}

model UserPermission {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Blog Permissions
  canCreatePosts Boolean @default(false)
  canEditPosts   Boolean @default(false)
  canDeletePosts Boolean @default(false)
  canPublishPosts Boolean @default(false)

  // Course Permissions
  canCreateCourses Boolean @default(false)
  canEditCourses   Boolean @default(false)
  canDeleteCourses Boolean @default(false)
  canPublishCourses Boolean @default(false)

  // User Management Permissions
  canViewUsers    Boolean @default(false)
  canEditUsers    Boolean @default(false)
  canDeleteUsers  Boolean @default(false)
  canManageRoles  Boolean @default(false)

  // System Permissions
  canViewAnalytics    Boolean @default(false)
  canManageSettings   Boolean @default(false)
  canManageCategories Boolean @default(false)
  canManageTags       Boolean @default(false)
  canManageMedia      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("user_permissions")
}

model UserActivity {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String
  description String?
  type        ActivityType
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  @@index([userId, createdAt])
  @@map("user_activities")
}

// ================================
// BLOG SYSTEM
// ================================

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  thumbnail   String?
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // SEO
  metaTitle       String?
  metaDescription String?
  altText         String?
  caption         String?

  // Analytics
  viewCount    Int @default(0)
  likeCount    Int @default(0)
  shareCount   Int @default(0)
  commentCount Int @default(0)

  // Relationships
  categories BlogPostCategory[]
  tags       BlogPostTag[]
  comments   Comment[]
  views      BlogPostView[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@index([slug])
  @@map("blog_posts")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  color       String?
  image       String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  blogPosts BlogPostCategory[]
  courses   Course[]

  @@index([slug])
  @@map("categories")
}

model Tag {
  id        String @id @default(cuid())
  name      String
  slug      String @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  blogPosts BlogPostTag[]

  @@index([slug])
  @@map("tags")
}

model BlogPostCategory {
  blogPostId String
  categoryId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogPostId, categoryId])
  @@map("blog_post_categories")
}

model BlogPostTag {
  blogPostId String
  tagId      String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogPostId, tagId])
  @@map("blog_post_tags")
}

model BlogPostView {
  id         String   @id @default(cuid())
  blogPostId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([blogPostId, createdAt])
  @@map("blog_post_views")
}

model Comment {
  id         String        @id @default(cuid())
  content    String
  status     CommentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Blog Post
  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  // Nested Comments
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([blogPostId, status])
  @@index([authorId])
  @@map("comments")
}

// ================================
// COURSE SYSTEM
// ================================

model Course {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String
  thumbnail   String?
  price       Decimal      @default(0)
  status      CourseStatus @default(DRAFT)
  level       CourseLevel  @default(BEGINNER)
  duration    Int          @default(0) // in minutes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  publishedAt DateTime?

  // Instructor
  instructorId String
  instructor   User   @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)

  // Category
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // SEO
  metaTitle       String?
  metaDescription String?
  altText         String?
  caption         String?

  // Analytics
  enrollmentCount Int @default(0)
  completionCount Int @default(0)
  averageRating   Decimal? @default(0)
  reviewCount     Int @default(0)

  // Course Structure
  modules     Module[]
  quizzes     Quiz[]
  notes       Note[]
  tasks       Task[]
  enrollments CourseEnrollment[]
  reviews     Review[]
  certificates Certificate[]

  @@index([status, publishedAt])
  @@index([instructorId])
  @@index([categoryId])
  @@index([slug])
  @@map("courses")
}

model Module {
  id          String @id @default(cuid())
  title       String
  description String?
  order       Int
  isPublished Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Lessons
  lessons Lesson[]

  @@index([courseId, order])
  @@map("modules")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  duration    Int        @default(0) // in minutes
  order       Int
  type        LessonType @default(TEXT)
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Module
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  // Progress tracking
  progress LessonProgress[]

  @@index([moduleId, order])
  @@map("lessons")
}

model CourseEnrollment {
  id           String           @id @default(cuid())
  enrolledAt   DateTime         @default(now())
  completedAt  DateTime?
  progress     Int              @default(0) // percentage
  status       EnrollmentStatus @default(ACTIVE)
  lastAccessed DateTime?

  // Student
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Progress tracking
  lessonProgress LessonProgress[]

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  timeSpent   Int      @default(0) // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enrollment
  enrollmentId String
  enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  // Lesson
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@map("lesson_progress")
}

// ================================
// QUIZ SYSTEM
// ================================

model Quiz {
  id           String @id @default(cuid())
  title        String
  description  String?
  instructions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Settings
  passingScore         Int     @default(70)
  maxAttempts          Int     @default(3)
  timeLimit            Int?    // in minutes
  shuffleQuestions     Boolean @default(false)
  shuffleAnswers       Boolean @default(false)
  showCorrectAnswers   Boolean @default(true)
  showScoreImmediately Boolean @default(true)
  allowReview          Boolean @default(true)
  requirePassword      Boolean @default(false)
  password             String?
  showOneQuestionAtTime Boolean @default(false)
  preventBacktracking  Boolean @default(false)
  availableFrom        DateTime?
  availableUntil       DateTime?

  // Questions and Attempts
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@index([courseId])
  @@map("quizzes")
}

model QuizQuestion {
  id          String       @id @default(cuid())
  type        QuestionType
  question    String
  options     String[]     @default([])
  correctAnswer String
  explanation String?
  points      Int          @default(1)
  imageUrl    String?
  order       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Quiz
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Answers
  answers QuizAnswer[]

  @@index([quizId, order])
  @@map("quiz_questions")
}

model QuizAttempt {
  id          String        @id @default(cuid())
  score       Int           @default(0)
  maxScore    Int           @default(0)
  percentage  Decimal       @default(0)
  status      AttemptStatus @default(IN_PROGRESS)
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  timeSpent   Int           @default(0) // in seconds

  // Student
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Quiz
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Answers
  answers QuizAnswer[]

  @@index([studentId, quizId])
  @@map("quiz_attempts")
}

model QuizAnswer {
  id        String   @id @default(cuid())
  answer    String
  isCorrect Boolean  @default(false)
  points    Int      @default(0)
  createdAt DateTime @default(now())

  // Attempt
  attemptId String
  attempt   QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  // Question
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("quiz_answers")
}

// ================================
// COURSE CONTENT
// ================================

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Optional associations
  moduleId String?
  lessonId String?

  @@index([authorId, courseId])
  @@map("notes")
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String
  instructions String
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Optional associations
  moduleId String?

  @@index([courseId])
  @@map("tasks")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Reviewer
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, courseId])
  @@index([courseId, rating])
  @@map("reviews")
}

model Certificate {
  id          String   @id @default(cuid())
  certificateNumber String @unique
  issuedAt    DateTime @default(now())
  expiresAt   DateTime?
  
  // Student
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Course
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([certificateNumber])
  @@map("certificates")
}

// ================================
// MEDIA MANAGEMENT
// ================================

model MediaFile {
  id        String    @id @default(cuid())
  name      String
  url       String
  type      MediaType
  size      Int       // in bytes
  mimeType  String
  alt       String?
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Uploader
  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([uploaderId])
  @@index([type])
  @@map("media_files")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())

  // Recipient
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ================================
// PAYMENTS & BILLING
// ================================

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Customer
  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Course (if applicable)
  courseId String?

  @@index([customerId])
  @@index([status])
  @@map("payments")
}

// ================================
// ANALYTICS
// ================================

model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  properties Json?
  userId     String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([event, createdAt])
  @@index([userId])
  @@map("analytics_events")
}

model PageView {
  id        String   @id @default(cuid())
  path      String
  title     String?
  referrer  String?
  userId    String?
  sessionId String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([path, createdAt])
  @@index([userId])
  @@map("page_views")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILL_BLANK
  MATCHING
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ActivityType {
  LOGIN
  LOGOUT
  CREATE_POST
  UPDATE_POST
  DELETE_POST
  CREATE_COURSE
  UPDATE_COURSE
  DELETE_COURSE
  ENROLL_COURSE
  COMPLETE_COURSE
  TAKE_QUIZ
  UPLOAD_MEDIA
  COMMENT
  REVIEW
  PAYMENT
  OTHER
}