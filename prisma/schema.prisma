// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  username          String   @unique
  firstName         String?
  lastName          String?
  password          String
  avatar            String?
  bio               String?
  role              UserRole @default(USER)
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  twoFactorSecret   String?
  twoFactorEnabled  Boolean  @default(false)
  lastLogin         DateTime?
  isActive          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  sessions          UserSession[]
  notifications     Notification[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  refreshToken String   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Notifications
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
  INSTRUCTOR
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  AUTH_VERIFICATION
  PASSWORD_RESET
  ACCOUNT_UPDATE
}