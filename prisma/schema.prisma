generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  username          String   @unique
  firstName         String?
  lastName          String?
  password          String?  // Made optional for social auth users
  avatar            String?
  bio               String?
  role              UserRole @default(USER)
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  twoFactorSecret   String?
  twoFactorEnabled  Boolean  @default(false)
  lastLogin         DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  authProvider      AuthProvider? @default(EMAIL)
  socialId          String?
  socialEmail       String?
  profileCompleted  Boolean       @default(false)
  linkedAccounts    SocialAccount[]
  sessions          UserSession[]
  notifications     Notification[]
  assignedMessages  ContactMessage[] @relation("AssignedMessages")
  messageReplies    MessageReply[]   @relation("MessageReplies")
  createdTemplates  MessageTemplate[] @relation("CreatedTemplates")
  blogPosts         BlogPost[]      @relation("BlogAuthor")
  blogComments      BlogComment[]   @relation("CommentAuthor")
  blogLikes         BlogLike[]      @relation("LikeUser")
  createdQuizzes    Quiz[]          @relation("QuizCreator")
  quizResults       QuizResult[]    @relation("QuizResults")
  uploadedFiles     File[]          @relation("UploadedFiles")
  @@map("users")
}

model SocialAccount {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @db.ObjectId
  provider     AuthProvider
  providerId   String
  providerEmail String?
  displayName  String?
  avatar       String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerId])
  @@map("social_accounts")
}

model UserSession {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  refreshToken String   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  rememberMe   Boolean  @default(false)
  refreshCount Int      @default(0)
  maxRefreshes Int      @default(8)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("user_sessions")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("notifications")
}

model ContactMessage {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  subject     String
  message     String
  status      MessageStatus       @default(UNREAD)
  priority    MessagePriority     @default(MEDIUM)
  category    MessageCategory     @default(GENERAL)
  source      MessageSource       @default(CONTACT_FORM)
  tags        String[]            @default([])
  ipAddress   String?
  userAgent   String?
  readAt      DateTime?
  repliedAt   DateTime?
  assignedTo  String?             @db.ObjectId
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  replies     MessageReply[]
  assignedUser User?              @relation("AssignedMessages", fields: [assignedTo], references: [id])
  @@map("contact_messages")
}

model MessageReply {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  messageId   String        @db.ObjectId
  content     String
  sentBy      ReplySender   @default(ADMIN)
  sentByUser  String?       @db.ObjectId
  attachments String[]      @default([])
  createdAt   DateTime      @default(now())
  message     ContactMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User?         @relation("MessageReplies", fields: [sentByUser], references: [id])
  @@map("message_replies")
}

model MessageTemplate {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  subject     String
  content     String
  category    MessageCategory @default(GENERAL)
  isDefault   Boolean         @default(false)
  createdBy   String?         @db.ObjectId
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdByUser User?         @relation("CreatedTemplates", fields: [createdBy], references: [id])
  @@map("message_templates")
}

model BlogPost {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String      @unique
  excerpt         String?
  content         String
  status          BlogStatus  @default(DRAFT)
  featuredImage   String?
  readTime        Int?
  views           Int         @default(0)
  likesCount      Int         @default(0)
  commentsCount   Int         @default(0)
  sharesCount     Int         @default(0)
  isFeatured      Boolean     @default(false)
  publishedAt     DateTime?
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String[]
  authorId        String      @db.ObjectId
  categoryId      String?     @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  author          User        @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category        BlogCategory? @relation(fields: [categoryId], references: [id])
  comments        BlogComment[]
  likes           BlogLike[]
  tags            BlogPostTag[]
  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]
  @@map("blog_categories")
}

model BlogComment {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isApproved Boolean    @default(true)
  isSpam    Boolean     @default(false)
  ipAddress String?
  userAgent String?
  postId    String      @db.ObjectId
  authorId  String      @db.ObjectId
  parentId  String?     @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  post      BlogPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User        @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent    BlogComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   BlogComment[] @relation("CommentReplies")
  @@map("blog_comments")
}

model BlogLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("LikeUser", fields: [userId], references: [id], onDelete: Cascade)
  @@unique([postId, userId])
  @@map("blog_likes")
}

model BlogTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     BlogPostTag[]
  @@map("blog_tags")
}

model BlogPostTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@unique([postId, tagId])
  @@map("blog_post_tags")
}

// Quiz System
model Quiz {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  quizType              QuizType         @default(DEFAULT)
  redirectAfterAnswer   RedirectType     @default(HOME)
  title                 String
  subtitle              String?
  description           String
  coverImage            String?           // URL to the quiz cover image (optional for now)
  category              String
  estimatedTime         String
  difficulty            QuizDifficulty    @default(BEGINNER)
  status                QuizStatus       @default(DRAFT)
  isPublic              Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  totalAttempts         Int              @default(0)
  completedAttempts     Int              @default(0)
  averageScore          Float            @default(0)
  averageCompletionTime Float            @default(0)
  tags                  String[]         @default([])
  createdBy             String           @db.ObjectId
  questions             QuizQuestion[]
  gradingCriteria       GradingCriteria[] // For DEFAULT quizzes
  complexGradingCriteria ComplexGradingCriteria[] // For COMPLEX quizzes
  dimensions            QuizDimension[]  // For COMPLEX quizzes
  createdByUser         User             @relation("QuizCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  results               QuizResult[]
  @@map("quizzes")
}

model QuizQuestion {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  order     Int
  quizId    String        @db.ObjectId
  dimensionId String?      @db.ObjectId // For COMPLEX quizzes
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  quiz      Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  dimension QuizDimension? @relation(fields: [dimensionId], references: [id], onDelete: Cascade)
  options   QuizOption[]
  @@map("quiz_questions")
}

model QuizOption {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  value      Int
  order      Int
  questionId String        @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  question   QuizQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  @@map("quiz_options")
}

model QuizDimension {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String   @db.ObjectId
  name      String   // e.g., "Extraversion/Introversion" for MBTI
  shortName String   // e.g., "E/I" for MBTI
  order     Int
  minScore  Int      // Minimum possible score for this dimension
  maxScore  Int      // Maximum possible score for this dimension
  threshold Float?   // Threshold for binary outcomes (e.g., 20 for MBTI)
  lowLabel  String?  // Label for scores <= threshold (e.g., "Introversion")
  highLabel String?  // Label for scores > threshold (e.g., "Extraversion")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  @@map("quiz_dimensions")
}

model GradingCriteria {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  minScore            Int
  maxScore            Int
  label               String
  color               String
  recommendations     String[]
  areasOfImprovement  String[] @default([])
  supportNeeded       String[] @default([])
  proposedCourses     Json[]   @default([])
  proposedProducts    Json[]   @default([])
  proposedStreaks     Json[]   @default([])
  proposedBlogPosts   Json[]   @default([])
  description         String?
  image               String?
  quizId              String   @db.ObjectId
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  quiz                Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  @@map("grading_criteria")
}

model ComplexGradingCriteria {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId              String   @db.ObjectId
  name                String   // e.g., "INTJ" for MBTI, "Type 4" for Enneagram
  label               String   // e.g., "The Architect" for MBTI
  color               String
  description         String?
  image               String?
  recommendations     String[]
  areasOfImprovement  String[] @default([])
  supportNeeded       String[] @default([])
  proposedCourses     Json[]   @default([])
  proposedProducts    Json[]   @default([])
  proposedStreaks     Json[]   @default([])
  proposedBlogPosts   Json[]   @default([])
  scoringLogic        Json     // e.g., { type: "threshold", dimensions: [{ name: "E/I", value: "I" }, ...] } or { type: "highest", dimension: "Enneagram", value: "Type 4" }
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  quiz                Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  @@map("complex_grading_criteria")
}

model QuizResult {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  quizId               String           @db.ObjectId
  userId               String           @db.ObjectId
  score                Int?             // Total score for DEFAULT, null for COMPLEX
  maxScore             Int?             // Max score for DEFAULT, null for COMPLEX
  dimensionScores      Json?            // For COMPLEX: { "E/I": 12, "S/N": 15, ... }
  percentage           Float?           // Percentage for DEFAULT, null for COMPLEX
  level                QuizResultLevel? // Level for DEFAULT, null for COMPLEX
  feedback             String
  recommendations      String[]
  completedAt          DateTime         @default(now())
  timeSpent            Float            @default(0)
  answers              Json
  classification       String           // e.g., "INTJ" for MBTI, "Type 4" for Enneagram, "Builder" for DEFAULT
  areasOfImprovement   String[]
  supportNeeded        String[]
  color                String?
  proposedCourses      Json[]           @default([])
  proposedProducts     Json[]           @default([])
  proposedStreaks      Json[]           @default([])
  proposedBlogPosts    Json[]           @default([])
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  quiz                 Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user                 User             @relation("QuizResults", fields: [userId], references: [id], onDelete: Cascade)
  @@map("quiz_results")
}

enum UserRole {
  USER
  MODERATOR
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK
  GITHUB
  LINKEDIN
  TWITTER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}

enum MessageStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageCategory {
  GENERAL
  SUPPORT
  MENTORSHIP
  BILLING
  TECHNICAL
  FEEDBACK
}

enum MessageSource {
  CONTACT_FORM
  EMAIL
  PHONE
  CHAT
}

enum ReplySender {
  MODERATOR
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
  USER
}

enum SubscribeType {
  FOOTER
  MODAL
  BOOK_PUBLISH
}

// Newsletter Subscription System
model Subscriber {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  subscribingTo  SubscribeType
  itemName       String?        // Optional item name (e.g., book title, course name)
  itemId         String?        // Optional item ID
  isActive       Boolean        @default(true)
  unsubscribedAt DateTime?
  unsubscribeReason UnsubscribeReason?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@map("subscribers")
}

enum UnsubscribeReason {
  TOO_MANY_EMAILS
  NOT_RELEVANT
  SPAM
  PRIVACY_CONCERNS
  NO_LONGER_INTERESTED
  OTHER
}

// File Management System
model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  type        FileType
  caption     String?
  width       Int?
  height      Int?
  duration    Int?
  isPublic    Boolean  @default(true)
  tags        String[] @default([])
  metadata    Json?
  uploadedBy  String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  uploadedByUser User? @relation("UploadedFiles", fields: [uploadedBy], references: [id])
  @@map("files")
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuizType {
  DEFAULT
  COMPLEX
  ONBOARDING
}

enum RedirectType {
  HOME
  RESULTS
}

enum QuizDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuizStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum QuizResultLevel {
  EXCELLENT
  GOOD
  FAIR
  NEEDS_IMPROVEMENT
}